//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/_Project/InputSystem/InputActions_gameManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions_gameManager : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions_gameManager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions_gameManager"",
    ""maps"": [
        {
            ""name"": ""MainMenu"",
            ""id"": ""d6b6711c-a25e-47cc-bd91-3731d0d35d7e"",
            ""actions"": [
                {
                    ""name"": ""StartGame"",
                    ""type"": ""Button"",
                    ""id"": ""d5249ffe-768e-450f-826c-f1e1bde183c0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""854e302c-6206-47a9-a494-cc0530ce4038"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Debug"",
            ""id"": ""9d8e11f8-2afc-402a-8256-814c5c7f90c1"",
            ""actions"": [
                {
                    ""name"": ""ActivateDebugAction"",
                    ""type"": ""Button"",
                    ""id"": ""60216111-32b5-4801-9647-e44acb46e928"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0ef91cec-acd4-44f6-8809-bdfa73de0a8e"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActivateDebugAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""FinalChoice"",
            ""id"": ""725b7699-0f26-4d38-8bf7-5bdbee18191b"",
            ""actions"": [
                {
                    ""name"": ""Choose"",
                    ""type"": ""Button"",
                    ""id"": ""ea8d013a-a6c3-477c-a86e-ecd3ce26343b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""216dd4f4-904a-432c-ad7e-25aa6dc5982d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b26e1f94-789f-4154-8acb-d3f1db0b8eca"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Choose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e7752a2-ebbd-46ee-90fe-3751cec72ba2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Choose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0858cc0-3afb-44e3-b2ae-540c0c2628ae"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Choose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b42ffe0-f20a-4753-b107-3097de5cc775"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Choose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c4e65b78-6f4e-4170-a05e-db94a7bee5cb"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Cutscenes"",
            ""id"": ""11055137-7608-49bf-a04a-fac32dbaf217"",
            ""actions"": [
                {
                    ""name"": ""Skip"",
                    ""type"": ""Button"",
                    ""id"": ""181d9ba6-9067-45e4-887a-4f9736d40ce8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a902c9f7-48b5-4b51-ac6b-bddff9dc7860"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MainMenu
        m_MainMenu = asset.FindActionMap("MainMenu", throwIfNotFound: true);
        m_MainMenu_StartGame = m_MainMenu.FindAction("StartGame", throwIfNotFound: true);
        // Debug
        m_Debug = asset.FindActionMap("Debug", throwIfNotFound: true);
        m_Debug_ActivateDebugAction = m_Debug.FindAction("ActivateDebugAction", throwIfNotFound: true);
        // FinalChoice
        m_FinalChoice = asset.FindActionMap("FinalChoice", throwIfNotFound: true);
        m_FinalChoice_Choose = m_FinalChoice.FindAction("Choose", throwIfNotFound: true);
        m_FinalChoice_Confirm = m_FinalChoice.FindAction("Confirm", throwIfNotFound: true);
        // Cutscenes
        m_Cutscenes = asset.FindActionMap("Cutscenes", throwIfNotFound: true);
        m_Cutscenes_Skip = m_Cutscenes.FindAction("Skip", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainMenu
    private readonly InputActionMap m_MainMenu;
    private IMainMenuActions m_MainMenuActionsCallbackInterface;
    private readonly InputAction m_MainMenu_StartGame;
    public struct MainMenuActions
    {
        private @InputActions_gameManager m_Wrapper;
        public MainMenuActions(@InputActions_gameManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @StartGame => m_Wrapper.m_MainMenu_StartGame;
        public InputActionMap Get() { return m_Wrapper.m_MainMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainMenuActions set) { return set.Get(); }
        public void SetCallbacks(IMainMenuActions instance)
        {
            if (m_Wrapper.m_MainMenuActionsCallbackInterface != null)
            {
                @StartGame.started -= m_Wrapper.m_MainMenuActionsCallbackInterface.OnStartGame;
                @StartGame.performed -= m_Wrapper.m_MainMenuActionsCallbackInterface.OnStartGame;
                @StartGame.canceled -= m_Wrapper.m_MainMenuActionsCallbackInterface.OnStartGame;
            }
            m_Wrapper.m_MainMenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @StartGame.started += instance.OnStartGame;
                @StartGame.performed += instance.OnStartGame;
                @StartGame.canceled += instance.OnStartGame;
            }
        }
    }
    public MainMenuActions @MainMenu => new MainMenuActions(this);

    // Debug
    private readonly InputActionMap m_Debug;
    private IDebugActions m_DebugActionsCallbackInterface;
    private readonly InputAction m_Debug_ActivateDebugAction;
    public struct DebugActions
    {
        private @InputActions_gameManager m_Wrapper;
        public DebugActions(@InputActions_gameManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @ActivateDebugAction => m_Wrapper.m_Debug_ActivateDebugAction;
        public InputActionMap Get() { return m_Wrapper.m_Debug; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebugActions set) { return set.Get(); }
        public void SetCallbacks(IDebugActions instance)
        {
            if (m_Wrapper.m_DebugActionsCallbackInterface != null)
            {
                @ActivateDebugAction.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnActivateDebugAction;
                @ActivateDebugAction.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnActivateDebugAction;
                @ActivateDebugAction.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnActivateDebugAction;
            }
            m_Wrapper.m_DebugActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ActivateDebugAction.started += instance.OnActivateDebugAction;
                @ActivateDebugAction.performed += instance.OnActivateDebugAction;
                @ActivateDebugAction.canceled += instance.OnActivateDebugAction;
            }
        }
    }
    public DebugActions @Debug => new DebugActions(this);

    // FinalChoice
    private readonly InputActionMap m_FinalChoice;
    private IFinalChoiceActions m_FinalChoiceActionsCallbackInterface;
    private readonly InputAction m_FinalChoice_Choose;
    private readonly InputAction m_FinalChoice_Confirm;
    public struct FinalChoiceActions
    {
        private @InputActions_gameManager m_Wrapper;
        public FinalChoiceActions(@InputActions_gameManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @Choose => m_Wrapper.m_FinalChoice_Choose;
        public InputAction @Confirm => m_Wrapper.m_FinalChoice_Confirm;
        public InputActionMap Get() { return m_Wrapper.m_FinalChoice; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FinalChoiceActions set) { return set.Get(); }
        public void SetCallbacks(IFinalChoiceActions instance)
        {
            if (m_Wrapper.m_FinalChoiceActionsCallbackInterface != null)
            {
                @Choose.started -= m_Wrapper.m_FinalChoiceActionsCallbackInterface.OnChoose;
                @Choose.performed -= m_Wrapper.m_FinalChoiceActionsCallbackInterface.OnChoose;
                @Choose.canceled -= m_Wrapper.m_FinalChoiceActionsCallbackInterface.OnChoose;
                @Confirm.started -= m_Wrapper.m_FinalChoiceActionsCallbackInterface.OnConfirm;
                @Confirm.performed -= m_Wrapper.m_FinalChoiceActionsCallbackInterface.OnConfirm;
                @Confirm.canceled -= m_Wrapper.m_FinalChoiceActionsCallbackInterface.OnConfirm;
            }
            m_Wrapper.m_FinalChoiceActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Choose.started += instance.OnChoose;
                @Choose.performed += instance.OnChoose;
                @Choose.canceled += instance.OnChoose;
                @Confirm.started += instance.OnConfirm;
                @Confirm.performed += instance.OnConfirm;
                @Confirm.canceled += instance.OnConfirm;
            }
        }
    }
    public FinalChoiceActions @FinalChoice => new FinalChoiceActions(this);

    // Cutscenes
    private readonly InputActionMap m_Cutscenes;
    private ICutscenesActions m_CutscenesActionsCallbackInterface;
    private readonly InputAction m_Cutscenes_Skip;
    public struct CutscenesActions
    {
        private @InputActions_gameManager m_Wrapper;
        public CutscenesActions(@InputActions_gameManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @Skip => m_Wrapper.m_Cutscenes_Skip;
        public InputActionMap Get() { return m_Wrapper.m_Cutscenes; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CutscenesActions set) { return set.Get(); }
        public void SetCallbacks(ICutscenesActions instance)
        {
            if (m_Wrapper.m_CutscenesActionsCallbackInterface != null)
            {
                @Skip.started -= m_Wrapper.m_CutscenesActionsCallbackInterface.OnSkip;
                @Skip.performed -= m_Wrapper.m_CutscenesActionsCallbackInterface.OnSkip;
                @Skip.canceled -= m_Wrapper.m_CutscenesActionsCallbackInterface.OnSkip;
            }
            m_Wrapper.m_CutscenesActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Skip.started += instance.OnSkip;
                @Skip.performed += instance.OnSkip;
                @Skip.canceled += instance.OnSkip;
            }
        }
    }
    public CutscenesActions @Cutscenes => new CutscenesActions(this);
    public interface IMainMenuActions
    {
        void OnStartGame(InputAction.CallbackContext context);
    }
    public interface IDebugActions
    {
        void OnActivateDebugAction(InputAction.CallbackContext context);
    }
    public interface IFinalChoiceActions
    {
        void OnChoose(InputAction.CallbackContext context);
        void OnConfirm(InputAction.CallbackContext context);
    }
    public interface ICutscenesActions
    {
        void OnSkip(InputAction.CallbackContext context);
    }
}
